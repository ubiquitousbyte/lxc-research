@article{10.1145/368481.368502,
author = {Codd, E. F. and Lowry, E. S. and McDonough, E. and Scalzi, C. A.},
title = {Multiprogramming STRETCH: Feasibility Considerations},
year = {1959},
issue_date = {Nov. 1959},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {2},
number = {11},
issn = {0001-0782},
url = {https://doi.org/10.1145/368481.368502},
doi = {10.1145/368481.368502},
journal = {Commun. ACM},
month = {11},
pages = {13-17},
numpages = {5}
}

@article{10.1145/361011.361073,
author = {Popek, Gerald J. and Goldberg, Robert P.},
title = {Formal Requirements for Virtualizable Third Generation Architectures},
year = {1974},
issue_date = {July 1974},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {17},
number = {7},
issn = {0001-0782},
url = {https://doi.org/10.1145/361011.361073},
doi = {10.1145/361011.361073},
abstract = {Virtual machine systems have been implemented on a limited number of third generation computer systems, e.g. CP-67 on the IBM 360/67. From previous empirical studies, it is known that certain third generation computer systems, e.g. the DEC PDP-10, cannot support a virtual machine system. In this paper, model of a third-generation-like computer system is developed. Formal techniques are used to derive precise sufficient conditions to test whether such an architecture can support virtual machines.},
journal = {Commun. ACM},
month = {07},
pages = {412-421},
numpages = {10},
keywords = {virtual machine, operating system, abstract model, proof, virtual machine monitor, hypervisor, virtual memory, sensitive instruction, formal requirements, third generation architecture}
}

@article{10.1145/3365199,
author = {Randal, Allison},
title = {The Ideal Versus the Real: Revisiting the History of Virtual Machines and Containers},
year = {2020},
issue_date = {January 2021},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {53},
number = {1},
issn = {0360-0300},
url = {https://doi.org/10.1145/3365199},
doi = {10.1145/3365199},
abstract = {The common perception in both academic literature and industry today is that virtual machines offer better security, whereas containers offer better performance. However, a detailed review of the history of these technologies and the current threats they face reveals a different story. This survey covers key developments in the evolution of virtual machines and containers from the 1950s to today, with an emphasis on countering modern misperceptions with accurate historical details and providing a solid foundation for ongoing research into the future of secure isolation for multitenant infrastructures, such as cloud and container deployments.},
journal = {ACM Comput. Surv.},
month = {02},
articleno = {5},
numpages = {31},
keywords = {virtualization, Containers, virtual machines}
}

@book{10.5555/2490781,
author = {Silberschatz, Abraham and Galvin, Peter B. and Gagne, Greg},
title = {Operating System Concepts},
year = {2018},
isbn = {9781119320913},
publisher = {Wiley Publishing},
edition = {10th},
abstract = {The 10 edition of Operating System Concepts continues to evolve to provide a solid theoretical foundation for understanding operating systems. This edition has been updated with more extensive coverage of the most current topics and applications, improved conceptual coverage and additional content to bridge the gap between concepts and actual implementations. A new design allows for easier navigation and enhances reader motivation. Additional end-of-chapter, exercises, review questions, and programming exercises help to further reinforce important concepts. WileyPLUS, including a test bank, self-check exercises, and a student solutions manual, is also part of the comprehensive support package.}
}

@inproceedings{10.1145/3381052.3381315,
author = {Anjali and Caraza-Harter, Tyler and Swift, Michael M.},
title = {Blending Containers and Virtual Machines: A Study of Firecracker and GVisor},
year = {2020},
isbn = {9781450375542},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3381052.3381315},
doi = {10.1145/3381052.3381315},
abstract = {With serverless computing, providers deploy application code and manage resource allocation dynamically, eliminating infrastructure management from application development.Serverless providers have a variety of virtualization platforms to choose from for isolating functions, ranging from native Linux processes to Linux containers to lightweight isolation platforms, such as Google gVisor [7] and AWS Firecracker [5]. These platforms form a spectrum as they move functionality out of the host kernel and into an isolated guest environment. For example, gVisor handles many system calls in a user-mode Sentry process while Firecracker runs a full guest operating system in each microVM. A common theme across these platforms are the twin goals of strong isolation and high performance.In this paper, we perform a comparative study of Linux containers (LXC), gVisor secure containers, and Firecracker microVMs to understand how they use Linux kernel services differently: how much does their use of host kernel functionality vary? We also evaluate the performance costs of the designs with a series of microbenchmarks targeting different kernel subsystems.Our results show that despite moving much functionality out of the kernel, both Firecracker and gVisor execute substantially more kernel code than native Linux. gVisor and Linux containers execute substantially the same code, although with different frequency.},
booktitle = {Proceedings of the 16th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments},
pages = {101–113},
numpages = {13},
keywords = {benchmarking, gVisor, firecracker, serverless computing, operating systems, virtualization, code coverage},
location = {Lausanne, Switzerland},
series = {VEE '20}
}

@inproceedings{10.1145/3132747.3132763,
author = {Manco, Filipe and Lupu, Costin and Schmidt, Florian and Mendes, Jose and Kuenzer, Simon and Sati, Sumit and Yasukata, Kenichi and Raiciu, Costin and Huici, Felipe},
title = {My VM is Lighter (and Safer) than Your Container},
year = {2017},
isbn = {9781450350853},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3132747.3132763},
doi = {10.1145/3132747.3132763},
abstract = {Containers are in great demand because they are lightweight when compared to virtual machines. On the downside, containers offer weaker isolation than VMs, to the point where people run containers in virtual machines to achieve proper isolation. In this paper, we examine whether there is indeed a strict tradeoff between isolation (VMs) and efficiency (containers). We find that VMs can be as nimble as containers, as long as they are small and the toolstack is fast enough.We achieve lightweight VMs by using unikernels for specialized applications and with Tinyx, a tool that enables creating tailor-made, trimmed-down Linux virtual machines. By themselves, lightweight virtual machines are not enough to ensure good performance since the virtualization control plane (the toolstack) becomes the performance bottleneck. We present LightVM, a new virtualization solution based on Xen that is optimized to offer fast boot-times regardless of the number of active VMs. LightVM features a complete redesign of Xen's control plane, transforming its centralized operation to a distributed one where interactions with the hypervisor are reduced to a minimum. LightVM can boot a VM in 2.3ms, comparable to fork/exec on Linux (1ms), and two orders of magnitude faster than Docker. LightVM can pack thousands of LightVM guests on modest hardware with memory and CPU usage comparable to that of processes.},
booktitle = {Proceedings of the 26th Symposium on Operating Systems Principles},
pages = {218–233},
numpages = {16},
keywords = {operating systems, specialization, containers, virtual machine, Virtualization, hypervisor, Xen, unikernels},
location = {Shanghai, China},
series = {SOSP '17}
}

@article{10.1145/3140607.3050757,
author = {Kuenzer, Simon and Ivanov, Anton and Manco, Filipe and Mendes, Jose and Volchkov, Yuri and Schmidt, Florian and Yasukata, Kenichi and Honda, Michio and Huici, Felipe},
title = {Unikernels Everywhere: The Case for Elastic CDNs},
year = {2017},
issue_date = {July 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {7},
issn = {0362-1340},
url = {https://doi.org/10.1145/3140607.3050757},
doi = {10.1145/3140607.3050757},
journal = {SIGPLAN Not.},
month = {apr},
pages = {15–29},
numpages = {15}
}

@inproceedings{10.1145/2151024.2151030,
author = {Lv, Hui and Dong, Yaozu and Duan, Jiangang and Tian, Kevin},
title = {Virtualization Challenges: A View from Server Consolidation Perspective},
year = {2012},
isbn = {9781450311762},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2151024.2151030},
doi = {10.1145/2151024.2151030},
booktitle = {Proceedings of the 8th ACM SIGPLAN/SIGOPS Conference on Virtual Execution Environments},
pages = {15–26},
numpages = {12},
keywords = {scheduler, performance optimization, specvirt_sc2010, server consolidation, virtualization},
location = {London, England, UK},
series = {VEE '12}
}

@book{10.5555/1204009,
author = {Smith, Jim and Nair, Ravi},
title = {Virtual Machines: Versatile Platforms for Systems and Processes (The Morgan Kaufmann Series in Computer Architecture and Design)},
year = {2005},
isbn = {1558609105},
publisher = {Morgan Kaufmann Publishers Inc.},
address = {San Francisco, CA, USA}
}

@inproceedings{2006PerformanceEO,
  title={Performance Evaluation of Intel EPT Hardware Assist},
  author={Vmware Esx},
  year={2006}
}

@article{10.1145/2063176.2063194,
author = {Waldspurger, Carl and Rosenblum, Mendel},
title = {I/O Virtualization},
year = {2012},
issue_date = {January 2012},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {55},
number = {1},
issn = {0001-0782},
url = {https://doi.org/10.1145/2063176.2063194},
doi = {10.1145/2063176.2063194},
abstract = {Decoupling a logical device from its physical implementation offers many compelling advantages.},
journal = {Commun. ACM},
month = {01},
pages = {66–73},
numpages = {8}
}

@inproceedings{10.1145/3126908.3126925,
author = {Priedhorsky, Reid and Randles, Tim},
title = {Charliecloud: Unprivileged Containers for User-Defined Software Stacks in HPC},
year = {2017},
isbn = {9781450351140},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3126908.3126925},
doi = {10.1145/3126908.3126925},
abstract = {Supercomputing centers are seeing increasing demand for user-defined software stacks (UDSS), instead of or in addition to the stack provided by the center. These UDSS support user needs such as complex dependencies or build requirements, externally required configurations, portability, and consistency. The challenge for centers is to provide these services in a usable manner while minimizing the risks: security, support burden, missing functionality, and performance. We present Charliecloud, which uses the Linux user and mount namespaces to run industry-standard Docker containers with no privileged operations or daemons on center resources. Our simple approach avoids most security risks while maintaining access to the performance and functionality already on offer, doing so in just 800 lines of code. Charliecloud promises to bring an industry-standard UDSS user workflow to existing, minimally altered HPC resources.},
booktitle = {Proceedings of the International Conference for High Performance Computing, Networking, Storage and Analysis},
articleno = {36},
numpages = {10},
keywords = {least privilege, user environments, containers},
location = {Denver, Colorado},
series = {SC '17}
}

@inproceedings{10.1145/1629575.1629596,
author = {Klein, Gerwin and Elphinstone, Kevin and Heiser, Gernot and Andronick, June and Cock, David and Derrin, Philip and Elkaduwe, Dhammika and Engelhardt, Kai and Kolanski, Rafal and Norrish, Michael and Sewell, Thomas and Tuch, Harvey and Winwood, Simon},
title = {SeL4: Formal Verification of an OS Kernel},
year = {2009},
isbn = {9781605587523},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/1629575.1629596},
doi = {10.1145/1629575.1629596},
abstract = {Complete formal verification is the only known way to guarantee that a system is free of programming errors.We present our experience in performing the formal, machine-checked verification of the seL4 microkernel from an abstract specification down to its C implementation. We assume correctness of compiler, assembly code, and hardware, and we used a unique design approach that fuses formal and operating systems techniques. To our knowledge, this is the first formal proof of functional correctness of a complete, general-purpose operating-system kernel. Functional correctness means here that the implementation always strictly follows our high-level abstract specification of kernel behaviour. This encompasses traditional design and implementation safety properties such as the kernel will never crash, and it will never perform an unsafe operation. It also proves much more: we can predict precisely how the kernel will behave in every possible situation.seL4, a third-generation microkernel of L4 provenance, comprises 8,700 lines of C code and 600 lines of assembler. Its performance is comparable to other high-performance L4 kernels.},
booktitle = {Proceedings of the ACM SIGOPS 22nd Symposium on Operating Systems Principles},
pages = {207–220},
numpages = {14},
keywords = {sel4, microkernel, isabelle/hol, l4},
location = {Big Sky, Montana, USA},
series = {SOSP '09}
}

@article{10.22667/JOWUA.2021.09.30.047,
author    = {Francesco Pagano and Luca Verderame and Alessio Merlo},
title     = {Understanding Fuchsia Security},
journal   = {Journal of Wireless Mobile Networks, Ubiquitous Computing, and Dependable Applications},
publisher = {차세대 정보과학 및 기술연구회},
volume    = {12},
number    = {3},
pages     = {47-64},
year      = {2021},
}

@online{namespace-man-page,
author={Michael Kerrisk},
title={Namespaces},
year={2021},
urldate={2022-07-17},
url={https://man7.org/linux/man-pages/man7/namespaces.7.html},
keywords={online},
}

@online{oci-runtime-principles,
author = {Open Container Initiative},
title={The 5 principles of Standard Containers},
year={2016},
urldate={2022-05-26},
url = {https://github.com/opencontainers/runtime-spec/blob/main/principles.md},
keywords={online},
}

@online{fio-plot,
author= {louwrentius},
title={Fio-plot},
urldate={2022-09-25},
url = {https://github.com/louwrentius/fio-plot},
keywords={online},
}

@online{oci-runtime-operations,
author={Open Container Initiative},
title={Operations},
year={2016},
url={https://github.com/opencontainers/runtime-spec/blob/main/runtime.md#operations},
urldate={2022-08-20},
keywords={online},
}

@online{bcm2711-arm,
author={Raspberry Pi Ltd},
title={BCM2711 ARM Peripherals},
year={2022},
url={https://datasheets.raspberrypi.com/bcm2711/bcm2711-peripherals.pdf},
urldate={2022-09-24},
keywords={online},
}

@online{fedora-36-server,
author={Fedora},
title={Fedora 36 Server},
year={2022},
url={https://getfedora.org/en/server/download/},
urldate={2022-09-25},
keywords={online},
}

@online{oci-runtime-lifecycle,
author={Open Container Initiative},
title={Operations},
year={2016},
url={https://github.com/opencontainers/runtime-spec/blob/main/runtime.md#lifecycle},
urldate={2022-08-20},
keywords={online},
}

@online{idmappings,
author={The Linux Kernel Documentation},
title={Idmappings},
year={2022},
url={https://www.kernel.org/doc/html/latest/filesystems/idmappings.html},
urldate={2022-09-25},
keywords={online},
}

@online{oci-website,
author = {Open Container Initiative},
title={Open Containers Initiative Website},
year = {2015},
urldate={2022-05-26},
url = {https://opencontainers.org/},
keywords={online},
}

@online{sysbench-oltp,
author={Peter Zaitsev and Alexey Kopytov},
title={Sysbench OLTP},
year={2004},
urldate={2022-05-26},
url = {https://github.com/akopytov/sysbench},
keywords={online},
}

@online{include/linux/mm_types.h,
author={Linus Torvalds},
title={Linux Memory Mapping Types},
year={2022},
urldate={2022-06-23},
url = {https://github.com/torvalds/linux/blob/master/include/linux/mm_types.h},
keywords={online},
}

@online{include/linux/sched.h,
author={Linus Torvalds},
title={Linux Process Scheduling Header},
year={2022},
urldate={2022-06-23},
url = {https://github.com/torvalds/linux/blob/master/include/linux/sched.h},
keywords={online},
}

@online{kernel/sched/core.c,
author={Linus Torvalds},
title={Linux Process Scheduling Core},
year={2022},
urldate={2022-06-23},
url = {https://github.com/torvalds/linux/blob/master/kernel/sched/core.c},
keywords={online},
}

@online{aarch64/clone.S,
author={Sourceware},
title = {Glibc clone.S},
year={2022},
urldate={2022-06-23},
url = {https://sourceware.org/git/?p=glibc.git;a=blob;f=sysdeps/unix/sysv/linux/aarch64/clone.S;hb=HEAD},
keywords={online}
}


@online{google-gvisor,
author={Google},
title={gVisor},
year={2018},
urldate={2022-05-26},
url={https://github.com/google/gvisor},
keywords={online},
}

@inproceedings{10.1145/3050748.3050757,
author = {Kuenzer, Simon and Ivanov, Anton and Manco, Filipe and Mendes, Jose and Volchkov, Yuri and Schmidt, Florian and Yasukata, Kenichi and Honda, Michio and Huici, Felipe},
title = {Unikernels Everywhere: The Case for Elastic CDNs},
year = {2017},
isbn = {9781450349482},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/3050748.3050757},
doi = {10.1145/3050748.3050757},
booktitle = {Proceedings of the 13th ACM SIGPLAN/SIGOPS International Conference on Virtual Execution Environments},
pages = {15–29},
numpages = {15},
location = {Xi'an, China},
series = {VEE '17}
}

@article{10.1145/3140607.3050757,
author = {Kuenzer, Simon and Ivanov, Anton and Manco, Filipe and Mendes, Jose and Volchkov, Yuri and Schmidt, Florian and Yasukata, Kenichi and Honda, Michio and Huici, Felipe},
title = {Unikernels Everywhere: The Case for Elastic CDNs},
year = {2017},
issue_date = {July 2017},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {52},
number = {7},
issn = {0362-1340},
url = {https://doi.org/10.1145/3140607.3050757},
doi = {10.1145/3140607.3050757},
journal = {SIGPLAN Not.},
month = {apr},
pages = {15–29},
numpages = {15}
}

@INPROCEEDINGS{7095802, 
author={Felter, Wes and Ferreira, Alexandre and Rajamony, Ram and Rubio, Juan},
booktitle={2015 IEEE International Symposium on Performance Analysis of Systems and Software (ISPASS)},   
title={An updated performance comparison of virtual machines and Linux containers},   
year={2015},  
volume={},  
number={},  
pages={171-172},  
abstract={Cloud computing makes extensive use of virtual machines because they permit workloads to be isolated from one another and for the resource usage to be somewhat controlled. In this paper, we explore the performance of traditional virtual machine (VM) deployments, and contrast them with the use of Linux containers. We use KVM as a representative hypervisor and Docker as a container manager. Our results show that containers result in equal or better performance than VMs in almost all cases. Both VMs and containers require tuning to support I/Ointensive applications. We also discuss the implications of our performance results for future cloud architectures.},  
keywords={},  
doi={10.1109/ISPASS.2015.7095802},  
ISSN={},  
month={03},
}

@inproceedings{234857,
author = {Ethan G. Young and Pengfei Zhu and Tyler Caraza-Harter and Andrea C. Arpaci-Dusseau and Remzi H. Arpaci-Dusseau},
title = {The True Cost of Containing: A {gVisor} Case Study},
booktitle = {11th USENIX Workshop on Hot Topics in Cloud Computing (HotCloud 19)},
year = {2019},
address = {Renton, WA},
url = {https://www.usenix.org/conference/hotcloud19/presentation/young},
publisher = {USENIX Association},
month = {07},
}

@inproceedings{246288,
author = {Alexandru Agache and Marc Brooker and Alexandra Iordache and Anthony Liguori and Rolf Neugebauer and Phil Piwonka and Diana-Maria Popa},
title = {Firecracker: Lightweight Virtualization for Serverless Applications },
booktitle = {17th USENIX Symposium on Networked Systems Design and Implementation (NSDI 20)},
year = {2020},
isbn = {978-1-939133-13-7},
address = {Santa Clara, CA},
pages = {419--434},
url = {https://www.usenix.org/conference/nsdi20/presentation/agache},
publisher = {USENIX Association},
month = {02},
}

@book{10.5555/1869911,
author = {Kerrisk, Michael},
title = {The Linux Programming Interface: A Linux and UNIX System Programming Handbook},
year = {2010},
isbn = {1593272200},
publisher = {No Starch Press},
address = {USA},
edition = {1st},
abstract = {The Linux Programming Interface is the definitive guide to the Linux and UNIX programming interfacethe interface employed by nearly every application that runs on a Linux or UNIX system. In this authoritative work, Linux programming expert Michael Kerrisk provides detailed descriptions of the system calls and library functions that you need in order to master the craft of system programming, and accompanies his explanations with clear, complete example programs. You'll find descriptions of over 500 system calls and library functions, and more than 200 example programs, 88 tables, and 115 diagrams. You'll learn how to: Read and write files efficiently Use signals, clocks, and timers Create processes and execute programs Write secure programs Write multithreaded programs using POSIX threads Build and use shared libraries Perform interprocess communication using pipes, message queues, shared memory, and semaphores Write network applications with the sockets API While The Linux Programming Interface covers a wealth of Linux-specific features, including epoll, inotify, and the /proc file system, its emphasis on UNIX standards (POSIX.1-2001/SUSv3 and POSIX.1-2008/SUSv4) makes it equally valuable to programmers working on other UNIX platforms. The Linux Programming Interface is the most comprehensive single-volume work on the Linux and UNIX programming interface, and a book that's destined to become a new classic. Praise for The Linux Programming Interface "If I had to choose a single book to sit next to my machine when writing software for Linux, this would be it." Martin Landers, Software Engineer, Google "This book, with its detailed descriptions and examples, contains everything you need to understand the details and nuances of the low-level programming APIs in Linux . . . no matter what the level of reader, there will be something to be learnt from this book." Mel Gorman, Author of Understanding the Linux Virtual Memory Manager "Michael Kerrisk has not only written a great book about Linux programming and how it relates to various standards, but has also taken care that bugs he noticed got fixed and the man pages were (greatly) improved. In all three ways, he has made Linux programming easier. The in-depth treatment of topics in The Linux Programming Interface . . . makes it a must-have reference for both new and experienced Linux programmers." Andreas Jaeger, Program Manager, openSUSE, Novell "Michael's inexhaustible determination to get his information right, and to express it clearly and concisely, has resulted in a strong reference source for programmers. While this work is targeted at Linux programmers, it will be of value to any programmer working in the UNIX/POSIX ecosystem." David Butenhof, Author of Programming with POSIX Threads and Contributor to the POSIX and UNIX Standards ". . . a very thoroughyet easy to readexplanation of UNIX system and network programming, with an emphasis on Linux systems. It's certainly a book I'd recommend to anybody wanting to get into UNIX programming (in general) or to experienced UNIX programmers wanting to know 'what's new' in the popular GNU/Linux system." Fernando Gont, Network Security Researcher, IETF Participant, and RFC Author ". . . encyclopedic in the breadth and depth of its coverage, and textbook-like in its wealth of worked examples and exercises. Each topic is clearly and comprehensively covered, from theory to hands-on working code. Professionals, students, educators, this is the Linux/UNIX reference that you have been waiting for." Anthony Robins, Associate Professor of Computer Science, The University of Otago "I've been very impressed by the precision, the quality and the level of detail Michael Kerrisk put in his book. He is a great expert of Linux system calls and lets us share his knowledge and understanding of the Linux APIs." Christophe Blaess, Author of Programmation systeme en C sous Linux ". . . an essential resource for the serious or professional Linux and UNIX systems programmer. Michael Kerrisk covers the use of all the key APIs across both the Linux and UNIX system interfaces with clear descriptions and tutorial examples and stresses the importance and benefits of following standards such as the Single UNIX Specification and POSIX 1003.1." Andrew Josey, Director, Standards, The Open Group, and Chair of the POSIX 1003.1 Working Group "What could be better than an encyclopedic reference to the Linux system, from the standpoint of the system programmer, written by none other than the maintainer of the man pages himself? The Linux Programming Interface is comprehensive and detailed. I firmly expect it to become an indispensable addition to my programming bookshelf." Bill Gallmeister, Author of POSIX.4 Programmer's Guide: Programming for the Real World ". . . the most complete and up-to-date book about Linux and UNIX system programming. If you're new to Linux system programming, if you're a UNIX veteran focused on portability while interested in learning the Linux way, or if you're simply looking for an excellent reference about the Linux programming interface, then Michael Kerrisk's book is definitely the companion you want on your bookshelf." Loic Domaigne, Chief Software Architect (Embedded), Corpuls.com}
}

@article{https://doi.org/10.1002/cpe.5693,
author = {Shirinbab, Sogand and Lundberg, Lars and Casalicchio, Emiliano},
title = {Performance evaluation of containers and virtual machines when running Cassandra workload concurrently},
journal = {Concurrency and Computation: Practice and Experience},
volume = {32},
number = {17},
pages = {e5693},
keywords = {Cassandra, cloud computing, containers, performance evaluation, virtual machine},
doi = {https://doi.org/10.1002/cpe.5693},
url = {https://onlinelibrary.wiley.com/doi/abs/10.1002/cpe.5693},
eprint = {https://onlinelibrary.wiley.com/doi/pdf/10.1002/cpe.5693},
abstract = {Summary NoSQL distributed databases are often used as Big Data platforms. To provide efficient resource sharing and cost effectiveness, such distributed databases typically run concurrently on a virtualized infrastructure that could be implemented using hypervisor-based virtualization or container-based virtualization. Hypervisor-based virtualization is a mature technology but imposes overhead on CPU, networking, and disk. Recently, by sharing the operating system resources and simplifying the deployment of applications, container-based virtualization is getting more popular. This article presents a performance comparison between multiple instances of VMware VMs and Docker containers running concurrently. Our workload models a real-world Big Data Apache Cassandra application from Ericsson. As a baseline, we evaluated the performance of Cassandra when running on the nonvirtualized physical infrastructure. Our study shows that Docker has lower overhead compared with VMware; the performance on the container-based infrastructure was as good as on the nonvirtualized. Our performance evaluations also show that running multiple instances of a Cassandra database concurrently affected the performance of read and write operations differently; for both VMware and Docker, the maximum number of read operations was reduced when we ran several instances concurrently, whereas the maximum number of write operations increased when we ran instances concurrently.},
year = {2020}
}

@inproceedings{8457798,
author={Zhang, Qi and Liu, Ling and Pu, Calton and Dou, Qiwei and Wu, Liren and Zhou, Wei},
booktitle={2018 IEEE 11th International Conference on Cloud Computing (CLOUD)},
title={A Comparative Study of Containers and Virtual Machines in Big Data Environment},
year={2018},
volume={},
number={},
pages={178-185},
doi={10.1109/CLOUD.2018.00030}
}


@online{https://patchwork.kernel.org/project/linux-hardening/cover/cover.1619094428.git.legion@kernel.org/,
author={Alexey Gladkov},
title={Count rlimits in each user namespace},
year={2021},
urldate={2022-05-26},
url={https://patchwork.kernel.org/project/linux-hardening/cover/cover.1619094428.git.legion@kernel.org/},
keywords={online},
}

@online{https://github.com/containerd/containerd/pull/4734,
author={Mauricio Vasquez},
title={Experimental: Support idmapped mounts kernel patches},
year={2020},
urldate={2022-09-30},
url={https://github.com/containerd/containerd/pull/4734},
keywords={online},
}

@online{https://lwn.net/Articles/896255/,
author={Jake Edge},
title={ID-mapped mounts},
year={2022},
urldate={2022-09-30},
url={https://lwn.net/Articles/896255/},
keyword={online},
}